?lm(\)
?lm()
install.packages(c("foreign", "lattice", "Matrix", "mgcv", "nlme", "rpart", "survival"))
data(iris)
install.packages("nnet")
levels(iris$Species)
length(iris$Species)
samp = sample(1:150,75)
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
iris
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
?nnet
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb19.R')
iris.net$wts
source('~/foo.R')
source('~/foo.R')
install.packages("ISLR")
help(Wage)
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
help(Wage)
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
summary(wageFIt)
summary(wageFit)
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
jkl
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
install.packages("splines")
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
summary(wageFit)
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
attr(bs(Wage$age, df = 6), "knots")
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
wageFit
summary(wageFit)
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
summary(wageFit)
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
summary(wageFit)
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
source('~/Dropbox/cornell/ORIE4740/lectFeb26.R')
sqrt(2.8^2+0.4^2)
sqrt(2.3^2+1.9^2)
sqrt(1.2^2+2.3^2)
sqrt(4+1.3^2)
(0.7+0.333333)^2+(0.33333+0.1)^2+(0.9-0.333333)^2
(0.7+0.333333)^2+(0.33333+0.1)^2+(0.9-0.333333)^2 - 0.18
install.packages("arules")
source('~/Dropbox/cornell/ORIE4740/lectApr9.R')
source('~/Dropbox/cornell/ORIE4740/lectApr9.R')
data(Epub)
class(Epub)
summary(Epub)
length(EPub)
length(Epub)
inspect(Epub[1:5])
Epub[1:5]
inspect(Epub[1:15])
length(Epub)
inspect(Epub[15729])
image(Epub[1:1000])
dim(Epub)
source('~/Dropbox/cornell/ORIE4740/lectApr9.R')
inpect(rules)
source('~/Dropbox/cornell/ORIE4740/lectApr9.R')
inspect(rules)
help(apriori)
source('~/Dropbox/cornell/ORIE4740/lectApr9.R')
source('~/Dropbox/cornell/ORIE4740/lectApr9.R')
source('~/Dropbox/cornell/ORIE4740/lectApr9.R')
1+1
unif
unif()
unif()?
dunif(x,min = 0, max = 6, log = FALSE)
nubmer.of.dice.rolls = 100
dice.rolls = runif(nubmer.of.dice.rolls,1,6)
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
dice.rolls
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
vector.sum.of.rolls.greater.than.m
cumDiceSum
number.of.rolls.until.m
cumDiceSum > m
vector.sum.of.rolls.greater.than.m[cumDiceSum > m]
cumDiceSum > m
cumDiceSum < m
cumDiceSum[cumDiceSum < m]
cumDiceSum[sum(cumDiceSum < m)]
cumDiceSum[sum(cumDiceSum < m)+1]
source('~/Desktop/DataIncubatorChallenge.R')
vector.sum.of.rolls.greater.than.m
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
dist(vector.number.of.rolls.until.m)
clear
clc
mean(vector.number.of.rolls.until.m)
mean(vector.sum.of.rolls.greater.than.m)
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m)
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
sd(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
n = 100000
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
sd(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
sd(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
sd(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
n = 1000
m = 100
vector.number.of.rolls.until.m = vector()
vector.sum.of.rolls.greater.than.m = vector()
for (i in 1:n)
{
nubmer.of.dice.rolls = 100
dice.rolls = sample(1:6,20,replace=TRUE)
cumDiceSum = cumsum(dice.rolls)
number.of.rolls.until.m = sum(cumDiceSum<m)+1
vector.number.of.rolls.until.m[i] = number.of.rolls.until.m
vector.sum.of.rolls.greater.than.m[i] =  cumDiceSum[sum(cumDiceSum < m)+1]
}
mean(vector.sum.of.rolls.greater.than.m) - m
sd(vector.sum.of.rolls.greater.than.m) - m
rm(list = ls())
n = 1000
m = 100
vector.number.of.rolls.until.m = vector()
vector.sum.of.rolls.greater.than.m = vector()
for (i in 1:n)
{
nubmer.of.dice.rolls = 100
mean(c(1,2,3,4,5,6))
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
rm(list = ls())
n = 10
m = 100
vector.number.of.rolls.until.m = vector()
vector.sum.of.rolls.greater.than.m = vector()
for (i in 1:n)
{
nubmer.of.dice.rolls = 100
dice.rolls = sample(1:6,ceiling(m/3.5),replace=TRUE)
cumDiceSum = cumsum(dice.rolls)
dice.rolls = sample(1:6,ceiling(m/3.5),replace=TRUE)
dice.rolls = sample(1:6,ceiling(m/3.5),replace=TRUE)
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
mean(vector.sum.of.rolls.greater.than.m) - m
sd(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
sd(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
sd(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.sum.of.rolls.greater.than.m) - m
sd(vector.sum.of.rolls.greater.than.m) - m
mean(vector.number.of.rolls.until.m)
source('~/Desktop/DataIncubatorChallenge.R')
mean(vector.number.of.rolls.until.m)
sd(vector.sum.of.rolls.greater.than.m)
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
print("the mean of the sum minus M when M = 20 is %d",mean(vector.sum.of.rolls.greater.than.m) - m )
source('~/Desktop/DataIncubatorChallenge.R')
foo = mean(vector.sum.of.rolls.greater.than.m) - m
paste("the mean of the sum minus M when M = 20 is %d",foo )
shor
head(vector.number.of.rolls.until.m)
head(vector.sum.of.rolls.greater.than.m)
source('~/Desktop/DataIncubatorChallenge.R')
foo = mean(vector.sum.of.rolls.greater.than.m) - m
paste("the mean of the sum minus M when M = 20 is",foo )
paste("the mean number of rolls when M = 20 is", mean(vector.number.of.rolls.until.m))
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
paste("the mean of the sum minus M when M = 20 is",mean(vector.sum.of.rolls.greater.than.m) - m )
paste("the standard deviation of the sum minus M when M = 20 is",sd(vector.sum.of.rolls.greater.than.m) - m)
paste("the mean number of rolls when M = 20 is", mean(vector.number.of.rolls.until.m))
paste("the standard deviation of the number of rolls M = 20 is", sd(vector.number.of.rolls.until.m))
mean(vector.sum.of.rolls.greater.than.m) - m
rm(list = ls())
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
source('~/Desktop/DataIncubatorChallenge.R')
a = [10.22,10.13,10.18,10.12,10.22,10.17,10.13,10.11,10.14,10.19]
a = [10.22,10.13,10.18,10.12,10.22,10.17,10.13,10.11,10.14,10.19]
a = (10.22,10.13,10.18,10.12,10.22,10.17,10.13,10.11,10.14,10.19)
a = (1,2,3)
a = c(10.22,10.13,10.18,10.12,10.22,10.17,10.13,10.11,10.14,10.19)
a
avg(a)
mean(a)
var(a)
va
var(a)
b = c(4.63,4.7,4.62,4.63,4.69,4.64,4.72,4.63)
mean(b)
source('~/Dropbox/DataIncubatorChallenge/TaxiScript.R')
a = c(10.13,10.10,10.14,10.12,10.12,10.19,10.14,10.12,10.11,10.14,10.13,10.13,10.13)
a
var(a)
*4
b = c(4.64,4.62,4.69,4.65,4.72,4.66)
var(b)
mean
mean(b)
library(tree)
install.packages("tree")
library(tree)
data(cpus,package = "MASS" )
help(data)
head(cpus)
hist(cpus$perf)
plot(cpus$perf,cpus$syct,col = c("red","green"))
hist(cpus$perf)
plot(cpus$perf,cpus$syct,col = c("red","green"))
plot(log(cpus$perf),cpus$syct,col = c("red","green"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green"))
plot(cpus$perf,cpus$syct,col = c("red","green","black"))
plot(cpus$perf,cpus$syct,col = c("red","green"))
require(graphics)
rm(list = ls())
setwd("~/Dropbox/cornell/ORIE4740/labsHw/lab1")
oliveData = read.table("olive-train.dat")
oliveTestData = read.table("olive-test.dat")
colnames(oliveData)= c("region","area","palmiticAcidPct","palmitoleicAcidPct","stearicAcidPct","oleicAcidPct","linoleicAcidPct","linolenicAcidPct","arachidicAcidPct","eicosenoicAcidPct")
colnames(oliveTestData)= c("region","area","palmiticAcidPct","palmitoleicAcidPct","stearicAcidPct","oleicAcidPct","linoleicAcidPct","linolenicAcidPct","arachidicAcidPct","eicosenoicAcidPct")
dim(oliveData)
#print(oliveData[1:10,])
oliveData$region = as.factor(oliveData$region)
oliveData$area = as.factor(oliveData$area)
oliveTestData$region = as.factor(oliveTestData$region)
oliveTestData$area = as.factor(oliveTestData$area)
#reformatting all of the axes for the density plots
par(mfrow=c(3,1))
someFool1 = density(as.numeric(oliveData$palmiticAcidPct[oliveData$region == 1]))
someFool2 = density(as.numeric(oliveData$palmiticAcidPct[oliveData$region == 2]))
someFool3 = density(as.numeric(oliveData$palmiticAcidPct[oliveData$region == 3]))
maximumY = c(someFool1$y,someFool2$y,someFool3$y)
maximumY = max(maximumY);
plot(density(as.numeric(oliveData$palmiticAcidPct[oliveData$region == 1])),xlim = c(500, 1800),ylim = c(0,maximumY),main = "palmiticAcid & region 1")
plot(density(as.numeric(oliveData$palmiticAcidPct[oliveData$region == 2])),xlim = c(500, 1800),ylim = c(0,maximumY),main = "palmiticAcid & region 2")
plot(density(as.numeric(oliveData$palmiticAcidPct[oliveData$region == 3])),xlim = c(500, 1800),ylim = c(0,maximumY),main = "palmiticAcid & region 3")
par(mfrow=c(3,1)) #reformatting all of the axes for the density plots
someFool1 = density(as.numeric(oliveData$palmitoleicAcidPct[oliveData$region == 1]))
someFool2 = density(as.numeric(oliveData$palmitoleicAcidPct[oliveData$region == 2]))
someFool3 = density(as.numeric(oliveData$palmitoleicAcidPct[oliveData$region == 3]))
maximumY = c(someFool1$y,someFool2$y,someFool3$y)
maximumY = max(maximumY);
plot(density(as.numeric(oliveData$palmitoleicAcidPct[oliveData$region == 1])),xlim = c(0, 350),ylim = c(0,maximumY),main = "palmitoleicAcidPct & region 1")
plot(density(as.numeric(oliveData$palmitoleicAcidPct[oliveData$region == 2])),xlim = c(0, 350),ylim = c(0,maximumY),main = "palmitoleicAcidPct & region 2")
plot(density(as.numeric(oliveData$palmitoleicAcidPct[oliveData$region == 3])),xlim = c(0, 350),ylim = c(0,maximumY),main = "palmitoleicAcidPct & region 3")
par(mfrow=c(3,1)) #reformatting all of the axes for the density plots
someFool1 = density(as.numeric(oliveData$stearicAcidPct[oliveData$region == 1]))
someFool2 = density(as.numeric(oliveData$stearicAcidPct[oliveData$region == 2]))
someFool3 = density(as.numeric(oliveData$stearicAcidPct[oliveData$region == 3]))
maximumY = c(someFool1$y,someFool2$y,someFool3$y)
maximumY = max(maximumY);
plot(density(as.numeric(oliveData$stearicAcidPct[oliveData$region == 1])),xlim = c(120, 400),ylim = c(0,maximumY),main = "stearicAcidPct & region 1")
plot(density(as.numeric(oliveData$stearicAcidPct[oliveData$region == 2])),xlim = c(120, 400),ylim = c(0,maximumY),main = "stearicAcidPct & region 2")
plot(density(as.numeric(oliveData$stearicAcidPct[oliveData$region == 3])),xlim = c(120, 400),ylim = c(0,maximumY),main = "stearicAcidPct & region 3")
par(mfrow=c(3,1)) #reformatting all of the axes for the density plots
someFool1 = density(as.numeric(oliveData$oleicAcidPct[oliveData$region == 1]))
someFool2 = density(as.numeric(oliveData$oleicAcidPct[oliveData$region == 2]))
someFool3 = density(as.numeric(oliveData$oleicAcidPct[oliveData$region == 3]))
maximumY = c(someFool1$y,someFool2$y,someFool3$y)
require(graphics)
rm(list = ls())
setwd("~/Dropbox/cornell/ORIE4740/labsHw/lab1")
oliveData = read.table("olive-train.dat")
oliveTestData = read.table("olive-test.dat")
colnames(oliveData)= c("region","area","palmiticAcidPct","palmitoleicAcidPct","stearicAcidPct","oleicAcidPct","linoleicAcidPct","linolenicAcidPct","arachidicAcidPct","eicosenoicAcidPct")
colnames(oliveTestData)= c("region","area","palmiticAcidPct","palmitoleicAcidPct","stearicAcidPct","oleicAcidPct","linoleicAcidPct","linolenicAcidPct","arachidicAcidPct","eicosenoicAcidPct")
oliveData = oliveData[ oliveData$region != 1,]
dim(oliveData)
#print(oliveData[1:10,])
oliveData$region = as.factor(oliveData$region)
oliveData$area = as.factor(oliveData$area)
oliveTestData$region = as.factor(oliveTestData$region)
oliveTestData$area = as.factor(oliveTestData$area)
fit <- lm(oliveData$oleicAcidPct~oliveData$linoleicAcidPct, data=faithful)
par(mfrow=c(1,1))
#plot(oliveData$oleicAcidPct,oliveData$linoleicAcidPct, main="linoleic vs oleic",col = c("red","green")[ oliveData$region ],xlim = c(7250,7750),ylim = c(800,1200))
plot(oliveData$oleicAcidPct,oliveData$linoleicAcidPct, main="linoleic vs oleic",col = c("red","green")[ oliveData$region ])
range(oliveData$region)
summary(oliveData$region)
plot(cpus$perf,cpus$syct,col = c("red","green",))
plot(log(cpus$perf),cpus$syct,col = c("red","green"))
plot(log(cpus$perf),cpus$syct,col = c("red","green","black"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green"))
library(tree)
data(cpus,package = "MASS" )
hist(cpus$perf)
plot(cpus$perf,cpus$syct,col = c("red","green",))
library(tree)
data(cpus,package = "MASS" )
hist(cpus$perf)
plot(cpus$perf,cpus$syct,col = c("red","green"))
plot(log(cpus$perf),cpus$syct,col = c("red","green"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green","black"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green","black"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green","black"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green"))
plot(cpus$perf,cpus$syct,col = c("red","green"))
plot(cpus$perf,cpus$syct,col = c("red","green"))
plot(log(cpus$perf),cpus$syct,col = c("red","green"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green"))
plot(cpus$perf,cpus$syct,col = c("red","green"))
plot(log(cpus$perf),cpus$syct,col = c("red","green"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green"))
plot(log(cpus$perf),cpus$mmin,col = c("red","green"))
plot(log(cpus$perf),cpus$syct,col = c("red","green"))
cpus.tree = tree( formula = log(perf) ~syct + mmin + mmax + cach + chmin + chmax,data = cpus)
plot(cpus.tree,type = "uniform")
text(cpus.tree)
plot(cpus$cach,log(cpus$perf),)
plot(cpus.tree,type = "uniform")
text(cpus.tree)
plot(cpus$cach,log(cpus$perf),)
plot(cpus.tree,type = "uniform")
text(cpus.tree)
plot(cpus$cach,log(cpus$perf))
help("tree")
print(predict( object = cpus.tree, newdata = data.frame(cach = 40,mmax = 200000,syct = 300,mmin = 3000 , chmin = 8, chmax = 50)))
plot(cpus$cach,log(cpus$perf))
dim(cpus)
plot(cpus.tree,type = "uniform")
text(cpus.tree)
library(ISLR)
install.packages("ISLR")
